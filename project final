{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyN/6eYFQ4ArLZCXfsmXu6Hq",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Yussuf2001/Yussuf2001/blob/main/project%20final\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R_ckq5GK85-5",
        "outputId": "4f545b00-ff65-4b53-dc0d-17c9a4536940"
      },
      "source": [
        "\n",
        "print('Bismillah')\n",
        "\n",
        "import pandas as pd\n",
        "d004 = 'https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv' #this useful to get new information about covid-19\n",
        "df = pd.read_csv(d004).fillna(0)\n",
        "import numpy as np\n",
        "import matplotlib\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import csv\n",
        "WWW = ['World','Asia','Europe']\n",
        "s = df['location'][0]\n",
        "original_date = ''\n",
        "countries = []\n",
        "count = 0\n",
        "o_date = []\n",
        "for i in df['location']:\n",
        "  if s==i:\n",
        "    o_date.append(df['date'][count])\n",
        "    if len(o_date)>len(original_date):\n",
        "      original_date = o_date\n",
        "  else:\n",
        "    o_date = []\n",
        "    s = i\n",
        "  count += 1\n",
        "c = 0\n",
        "for i in original_date:\n",
        "  if i == '2020-02-22':\n",
        "    break\n",
        "  c+=1\n",
        "original_date = original_date[c:]\n",
        "name_of_country = df['location'][0]\n",
        "countries = [name_of_country]\n",
        "count=0\n",
        "for i in df['location']:\n",
        "  if name_of_country==i:\n",
        "    pass\n",
        "  else:\n",
        "    name_of_country=i\n",
        "    countries.append(name_of_country)\n",
        "  count+=1\n",
        "def find_nomer(a): #кез келген мемлекеттын файлдагы реттык номерын тауып береды\n",
        "  c = 0\n",
        "  for i in df['location']:\n",
        "    if i == a:\n",
        "      break\n",
        "    c+=1\n",
        "  return c\n",
        "#<<<<\n",
        "def determinate(b):# мемлекеттердын оз Даталарымен шыгарат жане оргинал data бойынша  малыметтерды орналастыру  \n",
        "  da = []\n",
        "  g = 0\n",
        "  dt = []\n",
        "  db = []\n",
        "  for i in df['location']:\n",
        "    if i == b:\n",
        "      dt.append(df['date'][g])\n",
        "      da.append(abs(df['new_cases'][g]))\n",
        "      db.append(abs(df['new_deaths'][g]))\n",
        "    g+=1\n",
        "  c = 0\n",
        "  dd = {}\n",
        "  dith = {}\n",
        "  for i in dt:\n",
        "    if i==original_date[0]:\n",
        "      dt = dt[c:]\n",
        "      da = da[c:]\n",
        "      db = db[c:]\n",
        "      break\n",
        "    c+=1\n",
        "  for i in range(len(dt)):\n",
        "    dd[dt[i]]=da[i]\n",
        "    dith[dt[i]] = db[i]\n",
        "  return [dd,dith] # ar kundegi malimetter\n",
        "#<<<<\n",
        "def time(a):               # мемлекеттегы жок Даталарды косып тойлыктырады\n",
        "  c = find_nomer(a)\n",
        "  g = {}\n",
        "  g2 = {}\n",
        "  count = 0\n",
        "  dd = determinate(a)[0]\n",
        "  dith = determinate(a)[1]\n",
        "  x = [w for w in dd]\n",
        "  x2 = [w for w in dith]\n",
        "  for i in original_date:\n",
        "    try:\n",
        "      if i == x[count]:\n",
        "        g[i] = dd[x[count]]\n",
        "        count+=1\n",
        "      else:\n",
        "        g[i] = 0\n",
        "    except IndexError:\n",
        "      g[i] = 0\n",
        "  count = 0\n",
        "  for i in original_date:\n",
        "    try:\n",
        "      if i == x2[count]:\n",
        "        g2[i] = dith[x2[count]]\n",
        "        count+=1\n",
        "      else:\n",
        "        g2[i] = 0\n",
        "    except IndexError:\n",
        "      g2[i] = 0\n",
        "  return g,g2\n",
        "#<<<<<<<<<<<<\n",
        "country_2 = countries[0]\n",
        "h = 0\n",
        "whole_dd = {}\n",
        "whole_dt = {}\n",
        "for i in countries:\n",
        "  if i in WWW:\n",
        "    pass\n",
        "  else:\n",
        "    whole_dd[i] = time(i)[0]\n",
        "    whole_dt[i] = time(i)[1]\n",
        "#<<<<<<<<<<\n",
        "ggg = {}\n",
        "ggg1 = {}\n",
        "for data in original_date:\n",
        "  t = 0\n",
        "  c = 0\n",
        "  for i in whole_dd:\n",
        "    t+=whole_dd[i][data]\n",
        "    c+=whole_dt[i][data]\n",
        "  ggg[data]=t\n",
        "  ggg1[data] = c\n",
        "#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n",
        "try:\n",
        "    with open('file_only_data_and_cases.csv', 'w') as csvfile:\n",
        "        writer = csv.DictWriter(csvfile, fieldnames=original_date)\n",
        "        writer.writeheader() # for taqyryp\n",
        "        for i in whole_dd:\n",
        "          writer.writerow(whole_dd[i])\n",
        "except AttributeError:\n",
        "    print(\"I/O error\")\n",
        "file_only_d = 'file_only_data_and_cases.csv'\n",
        "try:\n",
        "    with open('file_only_data_and_diths.csv', 'w') as csvfile:\n",
        "        writer = csv.DictWriter(csvfile, fieldnames=original_date)\n",
        "        writer.writeheader() # for taqyryp\n",
        "        for i in whole_dt:\n",
        "          writer.writerow(whole_dt[i])\n",
        "except AttributeError:\n",
        "    print(\"I/O error\")\n",
        "file_only_dt = 'file_only_data_and_diths.csv'\n",
        "#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n",
        "g = pd.read_csv(file_only_d)\n",
        "gt = pd.read_csv(file_only_dt)\n",
        "h = 0\n",
        "x = 0\n",
        "#dv = {}\n",
        "s,f,dr = [],[],[]\n",
        "for i in original_date: # data\n",
        "  h+=g[i]\n",
        "  x+=gt[i]\n",
        "  #dv[i] = sum(g[i])  dictionaryga ainaldyru ushin\n",
        "  s.append(i)\n",
        "  f.append(sum(g[i]))\n",
        "  dr.append(sum(gt[i]))\n",
        "  #print(g[i])# bir eldin bukil auyrgandarynyn sany\n",
        "h # = ar memlekette bukil auyrgandar sany .Series\n",
        "x # bukil memelekettegi qaitys bolgandar sany\n",
        "for_plot_whole_worldwide_cases = pd.DataFrame(f,s)# bukil alem boiynsha kundelikti auyrgandar sany\n",
        "for_plot_whole_worldwide_dcases = pd.DataFrame(dr,s)#bukil alem boiynsha kundelikti qaitys bolgandar sany\n",
        "#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n",
        "\n",
        "\n",
        "\n",
        "each_c_amount = []\n",
        "each_c = []\n",
        "c = 0\n",
        "havnot = []\n",
        "for i in range(len(h)):\n",
        "  if h[i] == 0:  # bizge auyrmagan memleket kerek emes\n",
        "    havnot.append(countries[i])\n",
        "  else:\n",
        "    each_c.append(countries[i])\n",
        "    each_c_amount.append(h[i])\n",
        "for_plot_each_worldwide_cases = pd.DataFrame(each_c,each_c_amount)\n",
        "#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n",
        "def for_ggg(a): # бул жилык сиякты бирак бул барлык мемлекеттердын малыметтеры ушын , негызы бул ауырган адамдар ушын \n",
        "  gg1 = {}\n",
        "  if str(a)[0].isalpha():\n",
        "    a = int(a[1:])\n",
        "    r = len(ggg)-a#>>>>>>>>>>>>>>>>>>-2\n",
        "    c = 0\n",
        "    for i in ggg:\n",
        "      if c>=r:\n",
        "        gg1[i] = ggg[i]\n",
        "      c+=1\n",
        "  else:\n",
        "    a = int(a)\n",
        "    c = 0\n",
        "    for i in ggg:\n",
        "      if c%a==0:\n",
        "        gg1[i] = ggg[i]\n",
        "      c+=1\n",
        "  return gg1\n",
        "#for_ggg('30')\n",
        "def for_ggg1(a): # бул жилык сиякты бирак булда барлык мемлекеттердын малыметтеры ушын , бул жогаргыдагыдай бирак бул олген адамдар ушын \n",
        "  g1 = {}\n",
        "  if str(a)[0].isalpha():\n",
        "    a = int(a[1:])\n",
        "    r = len(ggg1)-a#>>>>>>>>>>>>>>>-2\n",
        "    c = 0\n",
        "    for i in ggg1:\n",
        "      if c>=r:\n",
        "        g1[i] = ggg1[i]\n",
        "      c+=1\n",
        "  else:\n",
        "    a = int(a)\n",
        "    c = 0\n",
        "    for i in ggg1:\n",
        "      if c%a==0:\n",
        "        g1[i] = ggg1[i]\n",
        "      c+=1\n",
        "  return g1\n",
        "#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n",
        "def jiylyk(a):#baza for fix date   #top fixer >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>># бул быз жазган  мемлекеттын ДАТАсынын жиылыгы бойынша жумыс ыстейды\n",
        "  dict_for_plot = {}\n",
        "  for i in whole_dd:\n",
        "    t = 0\n",
        "    for_dict = {}\n",
        "    s = whole_dd[i]                      #s = ar memlekettin derekteri\n",
        "    for w in s:\n",
        "      if (str(a)[0]).isalpha():\n",
        "        r = len(whole_dd[i])-int(a[1:])\n",
        "        if t>=r:\n",
        "          for_dict[w]=s[w]\n",
        "        t+=1\n",
        "      else:\n",
        "        a = int(a)\n",
        "        if t%a==0:            #i = memleket attry\n",
        "            for_dict[w]=s[w]  #w = '202y-as-sd'\n",
        "        t+=1\n",
        "      dict_for_plot[i]=for_dict\n",
        "  dict_for_plot1 = {}\n",
        "  for i in whole_dt:\n",
        "    t = 0\n",
        "    for_dict = {}\n",
        "    s = whole_dt[i]                     #s = ar memlekettin derekteri\n",
        "    for w in s:\n",
        "      if (str(a)[0]).isalpha():\n",
        "        r = len(whole_dt[i])-int(a[1:]) #t ushin>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>-2\n",
        "        if t>=r:\n",
        "          for_dict[w]=s[w]\n",
        "        t+=1\n",
        "      else:\n",
        "        a = int(a)\n",
        "        if t%a==0:            #i = memleket attry\n",
        "            for_dict[w]=s[w]  #w = '202y-as-sd'\n",
        "        t+=1\n",
        "      dict_for_plot1[i]=for_dict\n",
        "  return dict_for_plot,dict_for_plot1\n",
        "def manager(nae, plot_by_data, kind_cases,yes):# бул акпараттарды кортып Плотингке тапсырыс береды\n",
        "  y = 0\n",
        "  while y == 0:\n",
        "    if nae in havnot:\n",
        "      nae = input('Bizde bul memleket turaly aqparat joq, basqa eldi engiz: ')\n",
        "      y=0\n",
        "    else:\n",
        "      if nae == 'Whole World':\n",
        "        y = 1\n",
        "        for_plotting_pd = for_ggg(plot_by_data)\n",
        "        for_plotting_pd1 = for_ggg1(plot_by_data)\n",
        "        break\n",
        "      try:\n",
        "        for_plotting_pd = jiylyk(plot_by_data)[0][nae]\n",
        "        for_plotting_pd1 = jiylyk(plot_by_data)[1][nae]     \n",
        "        y = 1\n",
        "      except KeyError:\n",
        "        nae = input('name is not right, place enter again: ')\n",
        "  print('Place, whait for 15 secund!')\n",
        "  if kind_cases=='diths':\n",
        "    fff = for_plotting_pd1\n",
        "  elif kind_cases=='cases':\n",
        "    fff = for_plotting_pd\n",
        "  else:\n",
        "    fff = [for_plotting_pd,for_plotting_pd1]\n",
        "  ddd = f'plot_about_covit-19_in_{nae} ({kind_cases}).png'\n",
        "  return plotting(nae,fff,plot_by_data,yes,ddd)\n",
        "def plotting(nae, for_plotting_pd,plot_by_data,yes, ddd):\n",
        "  j = 0\n",
        "  for_plotting_pd1 = 0\n",
        "  if len(for_plotting_pd)==2:\n",
        "    f = for_plotting_pd\n",
        "    for_plotting_pd = f[0]\n",
        "    for_plotting_pd1 = f[1]\n",
        "    j = 1\n",
        "  d = 0\n",
        "  if str(plot_by_data)[0].isalpha():\n",
        "    a = int(plot_by_data[1:])\n",
        "    d = 1\n",
        "    name = f'Graph about Covet-19 in the {nae} (Last {a} day)'\n",
        "  else:\n",
        "    a = int(plot_by_data)\n",
        "    name = f'Graph about Covet-19 in the {nae} ({a} daily)'\n",
        "  if 26<=a<=50:\n",
        "    plotting30(name,for_plotting_pd,for_plotting_pd1,j)\n",
        "  #>>>>>\n",
        "  elif (d==0 and 7<=a<=25) or (d==1 and a<=15):\n",
        "    plotting7(name, for_plotting_pd, for_plotting_pd1,d,j)\n",
        "  #>>>>>\n",
        "  else:\n",
        "    if a==1:\n",
        "        name = f'Graph about Covet-19 in the {nae} (all time)'\n",
        "    plottingwhole(name,for_plotting_pd,for_plotting_pd1,j)\n",
        "  if yes == 'y' or yes == 'yes':\n",
        "    plt.savefig(ddd)\n",
        "def neww(for_plotting_pd):\n",
        "  d = []\n",
        "  g = []\n",
        "  s = {}\n",
        "  for i in for_plotting_pd:\n",
        "      d.append(i)\n",
        "      g.append(for_plotting_pd[i])\n",
        "  s['date'] = d\n",
        "  s['cases'] = g\n",
        "  new = pd.DataFram\n",
        "  e.from_dict(s)\n",
        "  return new\n",
        "#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n",
        "def plotting7(name, f, f1,d,j):\n",
        "  if j==0:\n",
        "    frequencies = [f[i] for i in f]\n",
        "    freq_series = pd.Series(frequencies)\n",
        "    x_labels = [i for i in f]\n",
        "    b = 45\n",
        "    if d==1:\n",
        "      b = 0\n",
        "    fig, ax = plt.subplots(1, figsize=(18,6),sharex = True)\n",
        "    ax = freq_series.plot(kind='bar',color = '#ffcf9e')\n",
        "    ax.set_xticklabels(x_labels, rotation = b)\n",
        "    ax.set_title(name, color = 'r', fontsize = 14)\n",
        "    rects = ax.patches\n",
        "    if d==1:\n",
        "      labels = [int(f[i]) for i in f]\n",
        "      for rect, label in zip(rects, labels):\n",
        "          height = rect.get_height()\n",
        "          ax.text(rect.get_x() + rect.get_width() / 2, height+0.15, label,ha='center', va='bottom', rotation = 0)\n",
        "  else:\n",
        "    labels = [i for i in f]\n",
        "    malimet1 = [f[i] for i in f]\n",
        "    malimet2 = [f1[i] for i in f1]\n",
        "    x = labels\n",
        "    fig, ax = plt.subplots(1, figsize=(18,6),sharex = True)\n",
        "    rects1 = ax.bar(x, malimet1, width=0.8, label='Sick people')\n",
        "    rects2 = ax.bar(x, malimet2, width=0.8, label='The dead')\n",
        "    ax.set_title(name, color = 'r', fontsize = 14)\n",
        "    ax.set_xticks(x)\n",
        "    s = 75\n",
        "    if d==1:\n",
        "      s = 0\n",
        "    ax.set_xticklabels(labels,rotation = s)\n",
        "    ax.legend()\n",
        "    rects = ax.patches\n",
        "    labels = [int(f[i]) for i in f]+[int(f1[i]) for i in f1]\n",
        "    if d == 1:\n",
        "      for rect, label in zip(rects, labels):\n",
        "          height = rect.get_height()\n",
        "          ax.text(rect.get_x() + rect.get_width() / 2, height+0.15, label,ha='center', va='bottom', rotation = 0)\n",
        "def plotting30(name,f,f1,r):\n",
        "  x = [i for i in f]\n",
        "  y = [f[i] for i in x]\n",
        "  fig, ax = plt.subplots(1, figsize=(18,6),sharex = True)\n",
        "  ax.set_xticklabels(neww(f)['date'],rotation=35,ha='right')\n",
        "  plt.title(name,color = 'r')\n",
        "  if r==1:\n",
        "    d = [i for i in f1]\n",
        "    z = [f1[i] for i in d]\n",
        "    plt.stem(x,y,'r',label='Sick people')\n",
        "    plt.stem(d,z,linefmt='y',markerfmt='D',label='The dead')\n",
        "    plt.legend()\n",
        "  else:\n",
        "    plt.stem(x,y,'r')\n",
        "  if r == 0:\n",
        "    ax.set_xticklabels(neww(f)['date'].unique().astype(str), rotation='vertical')\n",
        "  sns.despine(bottom=True)\n",
        "  plt.tight_layout(h_pad=2)\n",
        "def plottingwhole(name,f,f1,r):\n",
        "  plt.figure(figsize=(18,6))\n",
        "  plt.grid(True, color = 'b',alpha = 0.2)\n",
        "  plt.title(name,color = 'r')\n",
        "  plt.xlabel('time')\n",
        "  if r==0:\n",
        "    sns.lineplot(data=f, color = '#4f3f63' , linewidth=2.5);\n",
        "  else:\n",
        "    x = [i for i in f]\n",
        "    y = [f[i] for i in x]\n",
        "    z = [i for i in f1]\n",
        "    k = [f1[i] for i in z]\n",
        "    plt.plot(x,y,z,k)\n",
        "#That's all , let's see result "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Bismillah\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 514
        },
        "id": "VG5wi8Mu-59S",
        "outputId": "ea400fc3-3783-4f6b-bf1e-a2817942556f"
      },
      "source": [
        "where = input('name_of_country/world: ')\n",
        "when = input('mounthly/last_week/last_month/all time: ')\n",
        "kind = input('what kind of you want (cases,diths,Both): ')\n",
        "save = input('Do you want to save diogram, y/n: ')\n",
        "manager(where, when,kind,save)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "name_of_country/world: Kazakhstan\n",
            "mounthly/last_week/last_month/all time: 7\n",
            "what kind of you want (cases,diths,Both): cases\n",
            "Do you want to save diogram, y/n: n\n",
            "Place, whait for 15 secund!\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1296x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}